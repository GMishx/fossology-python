This library can be used to access data from the FOSSology API via Python scripts.

See `the OpenAPI specification <https://raw.githubusercontent.com/fossology/fossology/master/src/www/ui/api/documentation/openapi.yaml>`_ used to implement this library.

Usage
=====

Installation
------------

-  The library package is only available on devops.bt.siemens.com Artifactory:

   .. code:: shell

      pip install -i "https://devops.bt.siemens.com/artifactory/api/pypi/pypi-all/simple" fossology

-  Additional dependencies:

   .. code:: shell

      pip install requests

Using the API
-------------

-  Export required environment variables:

   .. code:: shell

      export FOSSOLOGY_TOKEN=<your_fossology_api_token>
      export FOSSOLOGY_SERVER=<your_fossology_server>
      export FOSSOLOGY_USER=<my_fossology_username>

-  Start using the API:

   .. code:: python

      from fossology.api import Fossology
      foss = Fossology(FOSSOLOGY_URL, FOSSOLOGY_TOKEN, FOSSOLOGY_USER)

-  Look at our `documentation
   website <https://fossology.code.siemens.io/fossology-python>`_ for
   further details about using this API.

Available endpoints
-------------------

   In version 0.0.4

In the current version of this module, not all REST API endpoints are
supported.

The following list gives an overview about the actual status of the
implementation:

-  User:

   -  ☒ GET /users
   -  ☒ GET /users/{id}
   -  ☐ DELETE /users/{id}

-  Folder:

   -  ☒ GET /folders
   -  ☒ POST /folders
   -  ☒ GET /folders/{id}
   -  ☒ DELETE /folders/{id}
   -  ☒ PATCH /folders/{id}
   -  ☒ PUT /folders/{id}

-  Upload:

   -  ☒ GET /uploads
   -  ☒ POST /uploads
   -  ☒ GET /uploads/{id}
   -  ☒ DELETE /uploads/{id}
   -  ☒ PATCH /uploads/{id}
   -  ☒ PUT /uploads/{id}

-  Search:

   -  ☒ GET /search

-  Report:

   -  ☒ GET /report
   -  ☒ GET /report/{id}

-  Jobs:

   -  ☒ GET /jobs
   -  ☒ POST /jobs
   -  ☒ GET /jobs/{id}

-  Default:

   -  ☒ POST /tokens
   -  ☒ GET /version

Contribute
==========

Develop
-------

-  Install dependencies using ``poetry`` (if you're not using
   ``poetry`` have a look at the project's `pyproject.toml <pyproject.toml>`_ for a list of
   dependencies):

   .. code:: shell

      poetry install

-  Contributions can be performed using `the merge request
   workflow <https://code.siemens.com/help/workflow/workflow.html>`__

-  Use proper
   `docstrings <https://realpython.com/documenting-python-code/>`__ to
   document functions and classes

-  Don't forget to extend the minimal `testsuite <test.py>`_ with the
   new functions/classes

-  The `documentation
   website <https://fossology.code.siemens.io/fossology-python>`_ is
   automatically generated by the `Sphinx autodoc
   extension <http://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html>`_

.. _feature-request--bug-report:


Build and publish
-----------------

- Configure the PyPi repository where the package shall be published:

  .. code:: shell

     poetry config repositories.myrepo $MYREPO_URL

- Build and publish the current version of the PyPi package:

  .. code:: shell

    poetry publish --repository myrepo --username $USER --password $PASSWD --build

- Build documentation:

  .. code:: shell

     poetry run sphinx-build docs/source docs/build

- Cleanup builds:

  .. code::shell

     rm -r dist/ build/ docs/build/


Test
----

The testsuite available in this project expects a running Fossology instance under the hostname **fossology** and a postgres database. Refer to the Fossology project to create a Docker-based test environment: `github.com/fossology/fossology <https://github.com/fossology/fossology>`_.

- Start the complete test suite or a specific test case:

  .. code:shell

     poetry run python test.py
     poetry run python test.py TestFossologySearch

Feature request & bug report
----------------------------

-  Use our `issue
   tracker <https://code.siemens.com/linux/fossology-python/issues>`_
